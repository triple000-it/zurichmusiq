// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
}

model Page {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  content     String   @db.Text
  metaTitle   String?
  metaDescription String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String
}

model Booking {
  id          String        @id @default(cuid())
  studioId    String
  studio      Studio        @relation(fields: [studioId], references: [id])
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  date        DateTime
  startTime   String
  duration    Int           // in hours
  totalCost   Float
  status      BookingStatus @default(PENDING)
  addons      String[]      @default([])
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Studio {
  id          String    @id @default(cuid())
  name        String
  description String    @db.Text
  size        String
  capacity    String
  hourlyRate  Float
  dailyRate   Float
  weeklyRate  Float
  features    String[]
  equipment   Json
  images      String[]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  features    String[]
  pricing     String
  duration    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Project {
  id          String   @id @default(cuid())
  title       String
  artist      String
  genre       String
  description String   @db.Text
  services    String[]
  year        String
  image       String
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}